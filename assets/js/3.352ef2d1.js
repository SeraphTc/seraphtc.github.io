(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{55:function(t,a,e){"use strict";e.r(a);var r=e(0),s=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"内存模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存模型","aria-hidden":"true"}},[t._v("#")]),t._v(" 内存模型")]),e("h2",{attrs:{id:"查看命令-info-memory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看命令-info-memory","aria-hidden":"true"}},[t._v("#")]),t._v(" 查看命令 info memory")]),e("p",[t._v("used_memory : redis分配器分配的内存(内存+虚拟内存)\nused_memory_rss : 操作系统角度redis使用的内存(redis进程 + 数据 + 碎片)\nmem_fragmentation_ratio : 内存碎片率 >1 越大则表明碎片很多 < 1 越小则表明虚拟内存很多\nmem_allocator : 内存分配器")]),e("h2",{attrs:{id:"内存划分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存划分","aria-hidden":"true"}},[t._v("#")]),t._v(" 内存划分")]),e("p",[t._v("数据\n进程本身运行内存\n缓存内存:客户端缓冲区,复制积压缓冲区,AOF缓冲区\n内存碎片:如果对数据频繁修改,数据大小相差也较大,会产生内存碎片.可以通过安全重启解决(重新加载备份文件).")]),e("h2",{attrs:{id:"内存原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 内存原理")]),e("p",[t._v("redis是K-V存储,因此每个键值对都是DictEntry{key,value,next}\nkey - sds\nvalue - redisObject{type,ptr} -> type - 表示数据类型 value - 每种类型数据结构不同")]),e("h3",{attrs:{id:"jemalloc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jemalloc","aria-hidden":"true"}},[t._v("#")]),t._v(" jemalloc")]),e("p",[t._v("libc , jemalloc, tcmalloc\n默认jemalloc 优点:减小内存碎片\n原理:\n内存分区:小,大,巨大,每个里面又有多个内存块. 当存储数据时,根据对象大小,分配最合适的内存块.")]),e("h3",{attrs:{id:"redisobject-16byte"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redisobject-16byte","aria-hidden":"true"}},[t._v("#")]),t._v(" redisObject 16Byte")]),e("p",[t._v("所有类型的数据都会封装为redisObject,因为对象类型,内部编码,内存回收,对象共享都需要redisObject支持,类似java的Object意义\ntypedef struct redisObject {\n　　unsigned type:4;\n　　unsigned encoding:4;\n　　unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */\n　　int refcount;\n　　void *ptr;\n}")]),e("h4",{attrs:{id:"type-4bit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#type-4bit","aria-hidden":"true"}},[t._v("#")]),t._v(" type 4bit")]),e("p",[t._v("表示对象类型")]),e("h4",{attrs:{id:"encoding-4bit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#encoding-4bit","aria-hidden":"true"}},[t._v("#")]),t._v(" encoding 4bit")]),e("p",[t._v("表示编码类型,每个数据类型至少有2种编码类型\nstring:int,raw,embstr\n列表:压缩列表,双端链表 元素少时使用压缩列表,元素多时,转化为双端链表")]),e("h4",{attrs:{id:"lru-4-0-24bit-2-6-22bit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lru-4-0-24bit-2-6-22bit","aria-hidden":"true"}},[t._v("#")]),t._v(" lru 4.0 24bit 2.6 22bit")]),e("p",[t._v("用于记录上次访问时间\nobject idletime命令可以显示该空转时间\n当内存回收算法选择的是volatile-lru或allkeys—lru,当Redis内存占用超过maxmemory指定的值时，Redis会优先选择空转时间最长的对象进行释放")]),e("h4",{attrs:{id:"refcount-4byte"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#refcount-4byte","aria-hidden":"true"}},[t._v("#")]),t._v(" refcount 4Byte")]),e("p",[t._v("记录被引用,共享的次数,创建时为1,多一次被引用++ ,为0时回收.\nRedis为了节省内存，当有一些对象重复出现时，新的程序不会创建新的对象，而是仍然使用原来的对象。这个被重复使用的对象，就是共享对象。目前共享对象仅支持整数值的字符串对象。")]),e("p",[t._v("为什么只对整数共享?\n是对内存与CPU的平衡,共享会减少内存,但是需要更多时间来实现共享.\n整数时间复杂度1,字符串n,其他数据结构n方")]),e("p",[t._v("redis在服务器初始化时,会创建0~9999的整数共享对象")]),e("h4",{attrs:{id:"ptr-8byte"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ptr-8byte","aria-hidden":"true"}},[t._v("#")]),t._v(" ptr 8Byte")]),e("p",[t._v("指向具体数据指针")]),e("h3",{attrs:{id:"sds"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sds","aria-hidden":"true"}},[t._v("#")]),t._v(" SDS")]),e("p",[t._v("struct sdshdr {\nint len;\nint free;\nchar buf[];\n}")]),e("p",[t._v("buf表示字节数据,用来存储字符串\nlen表示已使用的长度\nfree表示未使用长度")]),e("p",[t._v("buf大小 = len + free + 1 (以'\\0'表示结尾)\nSDS空间大小 = len + free + buf = 4+4+free+len+1 = 9 + free+len")]),e("p",[t._v("SDS与C字符串对比\n获取字符串长度：SDS是O(1)，C字符串是O(n)\n缓冲区溢出：使用C字符串的API时，如果字符串长度增加（如strcat操作）而忘记重新分配内存，很容易造成缓冲区的溢出；而SDS由于记录了长度，相应的API在可能造成缓冲区溢出时会自动重新分配内存，杜绝了缓冲区溢出。\n修改字符串时内存的重分配：对于C字符串，如果要修改字符串，必须要重新分配内存（先释放再申请），因为如果没有重新分配，字符串长度增大时会造成内存缓冲区溢出，字符串长度减小时会造成内存泄露。而对于SDS，由于可以记录len和free，因此解除了字符串长度和空间数组长度之间的关联，可以在此基础上进行优化：空间预分配策略（即分配内存时比实际需要的多）使得字符串长度增大时重新分配内存的概率大大减小；惰性空间释放策略使得字符串长度减小时重新分配内存的概率大大减小。\n存取二进制数据：SDS可以，C字符串不可以。因为C字符串以空字符作为字符串结束的标识，而对于一些二进制文件（如图片等），内容可能包括空字符串，因此C字符串无法正确存取；而SDS以字符串长度len来作为字符串结束标识，因此没有这个问题。")]),e("h3",{attrs:{id:"redis对象编码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis对象编码","aria-hidden":"true"}},[t._v("#")]),t._v(" redis对象编码")]),e("p",[t._v("为什么要有2种以上编码形式?\n1.接口实现分离,修改编码上层不受影响\n2.策略模式,适配更多场景")]),e("p",[t._v("编码原则:写入时编码,过程不可逆,只能从小内存编码转大内存编码")]),e("h4",{attrs:{id:"字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串")]),e("p",[t._v("最多不超过512M\nint编码:8个字节的长整型。字符串值是整型时，这个值使用long整型表示.\nembstr编码 <=39字节的字符串 (39 + 16redisObj长度 + 9sds非字符串长度 = 64) :redisObject与SDS连续,一次分配,适用于只读\nraw编码 >39字节的字符串 :redisObject与SDS不连续,两次分配")]),e("p",[t._v("编码转换:int超过long最大值 转换为raw,embstr修改后转换为raw")]),e("h4",{attrs:{id:"列表list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#列表list","aria-hidden":"true"}},[t._v("#")]),t._v(" 列表List")]),e("p",[t._v("列表支持两端插入和弹出,可以充当数组,队列,栈\nzipList编码:连续内存块实现,节省内存空间,变更时复杂度较高,节点少时使用\n使用ziplist必须同时满足2个条件:\n1.列表中元素数量小于512个;\n2.列表中所有字符串对象都不足64字节(不包括sds的大小,因为压缩列表使用连续定长内存块存储字符串);\nlinkedList编码:由list和node组合,双端链表保存了头和尾指针,每个node有前后指针")]),e("h4",{attrs:{id:"哈希hash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哈希hash","aria-hidden":"true"}},[t._v("#")]),t._v(" 哈希Hash")]),e("p",[t._v("zipList编码:用于元素个数较少的场景,节省空间,单时间复杂度较高,元素少时没有明显劣势\nHashTable编码:一个hashtable由1个dict结构、2个dictht结构、1个dictEntry指针数组（称为bucket）和多个dictEntry结构组成。")]),e("h5",{attrs:{id:"dictentry-24字节"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dictentry-24字节","aria-hidden":"true"}},[t._v("#")]),t._v(" dictEntry 24字节")]),e("p",[t._v("typedef struct dictEntry{\nvoid *key;\nunion{\nvoid *val;\nuint64_tu64;\nint64_ts64;\n}v;\nstruct dictEntry *next;\n}dictEntry;")]),e("p",[t._v("key:键\nvalue:可能是指针,64位整型,无符号整型\nnext:下一个dictEntry,用于解决hash冲突(hashMap的链表)")]),e("h5",{attrs:{id:"bucket"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bucket","aria-hidden":"true"}},[t._v("#")]),t._v(" bucket")]),e("p",[t._v("数组,每个元素为dictEntry的指针,大小为>dictEntry最小的2^n;dictEntry=1000 bucket大小为1024")]),e("h5",{attrs:{id:"dictht"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dictht","aria-hidden":"true"}},[t._v("#")]),t._v(" dictht")]),e("p",[t._v("typedef struct dictht{\ndictEntry **table;\nunsigned long size;\nunsigned long sizemask;\nunsigned long used;\n}dictht;")]),e("p",[t._v("table属性是一个指针，指向bucket；\nsize属性记录了哈希表的大小，即bucket的大小；\nused记录了已使用的dictEntry的数量；\nsizemask属性的值总是为size-1，这个属性和哈希值一起决定一个键在table中存储的位置。(和hashMap jdk1.7的index实现类似 当size是2的次幂时,mod等价于 & size -1)")]),e("h5",{attrs:{id:"dict"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dict","aria-hidden":"true"}},[t._v("#")]),t._v(" dict")]),e("p",[t._v("typedef struct dict{\ndictType *type;\nvoid *privdata;\ndictht ht[2];\nint trehashidx;\n} dict;")]),e("p",[t._v("type属性和privdata属性是为了适应不同类型的键值对，用于创建多态字典。\nht属性和trehashidx属性则用于rehash.\n通常情况下，所有的数据都是存在放dict的ht[0]中，ht[1]只在rehash的时候使用。dict进行rehash操作的时候，将ht[0]中的所有数据rehash到ht[1]中。然后将ht[1]赋值给ht[0]，并清空ht[1]。")]),e("p",[t._v("编码转换同ziplist,数量<512 && 所有key和value长度小于64")]),e("h3",{attrs:{id:"集合set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集合set","aria-hidden":"true"}},[t._v("#")]),t._v(" 集合Set")]),e("p",[t._v("set无序,不会有重复,无法通过下标操作元素,支持取交集,并集,差集")]),e("p",[t._v("####编码\nintset:\ntypedef struct intset{\nuint32_t encoding;\nuint32_t length;\nint8_t contents[];\n} intset;\ncontents存储数据\nencoding代表contents中存储内容的类型，虽然contents（存储集合中的元素）是int8_t类型，但实际上其存储的值是int16_t、int32_t或int64_t\nlength表示元素个数")]),e("p",[t._v("优势:节省空间,查询复杂度高,适用于元素少且小\n条件:都是整数,元素<512")]),e("p",[t._v("hashtable:同上")]),e("h3",{attrs:{id:"有序集合-zset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有序集合-zset","aria-hidden":"true"}},[t._v("#")]),t._v(" 有序集合 zset")]),e("p",[t._v("元素是有序的,根据设置的score排序")]),e("h4",{attrs:{id:"编码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编码","aria-hidden":"true"}},[t._v("#")]),t._v(" 编码")]),e("p",[t._v("ziplist编码:同上\nskiplist编码:\n跳跃表是一种有序数据结构，通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。\n除了跳跃表，实现有序数据结构的另一种典型实现是平衡树；\n大多数情况下，跳跃表的效率可以和平衡树媲美，且跳跃表实现比平衡树简单很多，因此redis中选用跳跃表代替平衡树。\n跳跃表支持平均O(logN)、最坏O(N)的复杂点进行节点查找，并支持顺序操作。\nRedis的跳跃表实现由zskiplist和zskiplistNode两个结构组成：\n前者用于保存跳跃表信息（如头结点、尾节点、长度等），后者用于表示跳跃表节点。具体结构相对比较复杂，略。")]),e("h2",{attrs:{id:"高可用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高可用","aria-hidden":"true"}},[t._v("#")]),t._v(" 高可用")]),e("p",[t._v("持久化(单机问题)\n主从复制(横向扩展)\n哨兵机制(自动恢复)\n集群(写操作负载均衡,分片)")]),e("p",[t._v("###持久化")]),e("h4",{attrs:{id:"rdb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rdb","aria-hidden":"true"}},[t._v("#")]),t._v(" RDB")]),e("p",[t._v("当前进程中的数据生成快照保存到硬盘")]),e("h5",{attrs:{id:"触发条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#触发条件","aria-hidden":"true"}},[t._v("#")]),t._v(" 触发条件:")]),e("p",[t._v("1.手动触发:bgsave save\n2.自动触发:save m n e.g.:save 900 1 当时间到900秒时，如果redis数据发生了至少1次变化，则执行bgsave;")]),e("h6",{attrs:{id:"save原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#save原理","aria-hidden":"true"}},[t._v("#")]),t._v(" save原理:")]),e("p",[t._v("serverCron + dirty计数器 + lastsave时间戳实现\nserverCron:Redis服务器的周期性操作函数，默认每隔100ms执行一次；\ndirty:记录上次save后操作了多少次\nlastsave:保存上次save的时间戳")]),e("p",[t._v("原理:\n定期扫描,当前时间 - lastsave > m && dirty > n do save")]),e("p",[t._v("其他触发条件:\n主从全量复制 & shutdown")]),e("h6",{attrs:{id:"流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 流程:")]),e("ol",[e("li",[e("p",[t._v("Redis父进程首先判断：当前是否在执行save，如果在执行则直接返回。主要是基于性能方面的考虑：两个并发的子进程同时执行大量的磁盘写操作，可能引起严重的性能问题。")])]),e("li",[e("p",[t._v("父进程执行fork操作创建子进程，这个过程中父进程是阻塞的，Redis不能执行来自客户端的任何命令")])]),e("li",[e("p",[t._v("父进程fork后，bgsave命令返回”Background saving started”信息并不再阻塞父进程，并可以响应其他命令")])]),e("li",[e("p",[t._v("子进程创建RDB文件，根据父进程内存快照生成临时快照文件，完成后对原有文件进行原子替换")])]),e("li",[e("p",[t._v("子进程发送信号给父进程表示完成，父进程更新统计信息")])])]),e("h5",{attrs:{id:"rdb文件原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rdb文件原理","aria-hidden":"true"}},[t._v("#")]),t._v(" rdb文件原理")]),e("p",[t._v('"REDIS"(常量字符串) +  db_version + selectDB0(数据库序号) + pairs(key,value,类型,过期时间) + …… + selectDBN + EOF + checksum')]),e("p",[t._v("通过LZF算法压缩,压缩的是数据库中超过20字节的数据")]),e("h5",{attrs:{id:"启动加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动加载","aria-hidden":"true"}},[t._v("#")]),t._v(" 启动加载")]),e("p",[t._v("启动时,如果没开启AOF,则加载rdb文件")]),e("h5",{attrs:{id:"rdb常用配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rdb常用配置","aria-hidden":"true"}},[t._v("#")]),t._v(" rdb常用配置")]),e("p",[t._v("save m n\nstop-writes-on-bgsave-error yes：当bgsave出现错误时，Redis是否停止执行写命令；\nrdbcompression yes：是否开启RDB文件压缩\nrdbchecksum yes：是否开启RDB文件的校验\ndbfilename dump.rdb：RDB文件名\ndir ./：RDB文件和AOF文件所在目录")]),e("h4",{attrs:{id:"aof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aof","aria-hidden":"true"}},[t._v("#")]),t._v(" AOF")]),e("p",[t._v("将单次操作命令记录到日志\nAOF实时性更好,但会更大,AOF适用于同步,RDB适用于网络传输,主从复制")]),e("h5",{attrs:{id:"流程-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 流程")]),e("p",[t._v("1.命令追加(append)：将Redis的写命令追加到缓冲区aof_buf；\n避免IO阻塞redis主线程")]),e("p",[t._v("2.文件写入(write)和文件同步(sync)：根据不同的同步策略将aof_buf中的内容同步到硬盘；\n有多种策略:\n1)always,每次操作都会写文件,吞吐很低,几百TPS\n2)no,只写入系统缓冲区(write),又操作系统来写入问题,同步周期大约30秒,周期不可用,安全性缺少保证\n3)everysec,每秒调用fsync进行同步")]),e("p",[t._v("3.文件重写(rewrite)：定期重写AOF文件，达到压缩的目的。\n重写是指将进程内数据转化为写命令,不会操作旧的AOF文件\n能压缩的原因:")]),e("ol",[e("li",[t._v("过期数据不用写入")]),e("li",[t._v("无效命令不再写入")]),e("li",[t._v("多条命令合并,存在临界值,超过临界值则拆分")])]),e("p",[t._v("文件重写的触发条件:\n手动bgrewriteaof\n自动触发必须同时满足下面两个条件:\n1)auto-aof-rewrite-min-size：执行AOF重写时，文件的最小体积，默认值为64MB。\n2)auto-aof-rewrite-percentage：执行AOF重写时，当前AOF大小(即aof_current_size)和上一次重写时AOF大小(aof_base_size)的比值。")]),e("p",[t._v("重写流程:")]),e("ol",[e("li",[e("p",[t._v("Redis父进程首先判断当前是否存在正在执行,存在则直接返回。")])]),e("li",[e("p",[t._v("父进程执行fork操作创建子进程，这个过程中父进程是阻塞的。")])])]),e("p",[t._v("3.1) 父进程fork后，bgrewriteaof命令返回”Background append only file rewrite started”信息并不再阻塞父进程，并可以响应其他命令。Redis的所有写命令依然写入AOF缓冲区，并根据appendfsync策略同步到硬盘，保证原有AOF机制的正确。")]),e("p",[t._v("3.2) 双写aof和rewrite缓冲区,由于fork操作使用写时复制技术，子进程只能共享fork操作时的内存数据。由于父进程依然在响应命令，因此Redis使用AOF重写缓冲区(图中的aof_rewrite_buf)保存这部分数据，防止新AOF文件生成期间丢失这部分数据。\n备注:在操作系统fork的实际实现中，基本都采用了写时复制技术，即在父/子进程试图修改数据空间之前，父子进程实际上共享数据空间；但是当父/子进程的任何一个试图修改数据空间时，操作系统会为修改的那一部分(内存的一页)制作一个副本。\n4) 子进程根据内存快照，按照命令合并规则写入到新的AOF文件。")]),e("p",[t._v("5.1) 子进程写完新的AOF文件后，向父进程发信号，父进程更新统计信息。")]),e("p",[t._v("5.2) 父进程把AOF重写缓冲区的数据写入到新的AOF文件，这样就保证了新AOF文件所保存的数据库状态和服务器当前状态一致。")]),e("p",[t._v("5.3) 使用新的AOF文件替换老文件，完成AOF重写。")]),e("h5",{attrs:{id:"启动加载-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动加载-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 启动加载")]),e("p",[t._v("AOF优先于RDB")]),e("ol",[e("li",[t._v("校验文件")]),e("li",[t._v("开启伪客户端,因为aof是客户端执行,依赖客户端上下文,因此开启无网络客户端")]),e("li",[t._v("完成")])]),e("h5",{attrs:{id:"常用配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 常用配置")]),e("p",[t._v("appendonly no：是否开启AOF\nappendfsync everysec：fsync持久化策略\nno-appendfsync-on-rewrite no：AOF重写期间是否禁止fsync；如果开启该选项，可以减轻文件重写时CPU和硬盘的负载（尤其是硬盘）\nauto-aof-rewrite-percentage 100：文件重写触发条件之一\nauto-aof-rewrite-min-size 64mb：文件重写触发提交之一")]),e("h4",{attrs:{id:"选型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选型","aria-hidden":"true"}},[t._v("#")]),t._v(" 选型")]),e("h5",{attrs:{id:"优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优缺点","aria-hidden":"true"}},[t._v("#")]),t._v(" 优缺点")]),e("p",[t._v("RDB优点:体积小,生成时性能损耗小\nRDB缺点:实时性,兼容性差\nAOF优点:秒级实时性,兼容性好\nAOF缺点:文件大,恢复速度慢,性能影响大")]),e("h5",{attrs:{id:"选型-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选型-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 选型")]),e("ol",[e("li",[t._v("如果redis对数据安全性,持久性要求低,可以使用RDB")]),e("li",[t._v("大多数情况使用AOF")])]),e("h5",{attrs:{id:"tip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tip","aria-hidden":"true"}},[t._v("#")]),t._v(" Tip")]),e("p",[t._v("fork阻塞：CPU的阻塞\n虽然fork时，子进程不会复制父进程的数据空间，但是会复制内存页表（页表相当于内存的索引、目录）；父进程的数据空间越大，内存页表越大，fork时复制耗时也会越多。\n监控:latest_fork_usec值")]),e("p",[t._v("AOF追加阻塞：硬盘的阻塞\n背景:如果硬盘负载过高，那么fsync操作可能会超过1s；如果Redis主线程持续高速向aof_buf写入命令，硬盘的负载可能会越来越大，IO资源消耗更快；如果此时Redis进程异常退出，丢失的数据也会越来越多，可能远超过1s。\n解决策略:主线程每次进行AOF会对比上次fsync成功的时间；如果距上次不到2s，主线程直接返回；如果超过2s，则主线程阻塞直到fsync同步完成\n监控:aof_delayed_fsync值")]),e("h3",{attrs:{id:"主从复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主从复制","aria-hidden":"true"}},[t._v("#")]),t._v(" 主从复制")]),e("p",[t._v("单机使用持久化方式来做灾备,当机器无法支撑时,需建立主从架构来实现读写分离.主从复制用于数据同步,单向从主同步到从.")]),e("p",[t._v("主从复制的作用:\n1.数据冗余\n2.故障恢复\n3.负载均衡\n4.高可用基石:主从复制是哨兵和集群的基石")]),e("h4",{attrs:{id:"开启复制方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开启复制方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 开启复制方法")]),e("p",[t._v("1.配置文件 slaveof\n2.启动命令 --slaveof\n3.客户端命令 slaveof")]),e("h4",{attrs:{id:"断开复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#断开复制","aria-hidden":"true"}},[t._v("#")]),t._v(" 断开复制")]),e("p",[t._v("slaveof no one")]),e("h4",{attrs:{id:"实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 实现原理")]),e("p",[t._v("主从复制过程大体可以分为3个阶段：连接建立阶段（即准备阶段）、数据同步阶段、命令传播阶段；")]),e("h5",{attrs:{id:"建立连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#建立连接","aria-hidden":"true"}},[t._v("#")]),t._v(" 建立连接")]),e("p",[t._v("1.保存主节点信息,salveof命令后,保存主节点host和port,返回ok,开始异步操作")]),e("p",[t._v("2.建立socket连接\n1).建立socket连接,从节点每秒调用replicationCron(),尝试与主节点建立socket连接,直到连接成功.\n2).连接成功后,从节点创建专门处理复制工作的线程,接受RDB和命令传播等.\n3).主节点为从节点socket创建客户端状态,后续从通过客户端命令形式操作.")]),e("p",[t._v("3.发送ping命令\n若成功返回pong,则继续进行\n若超时或返回其他结果,则断开连接,重新建立连接")]),e("p",[t._v("4.身份验证\n如果从节点设置了masterauth,则向主节点请求验证,若和主节点一致,则验证通过.")]),e("p",[t._v("5.发送从节点信息\n向主节点发送端口号信息,主节点将信息保存到从节点连接的客户端slave_listening_port字段中.")]),e("h5",{attrs:{id:"数据同步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据同步","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据同步")]),e("p",[t._v("从节点通过psync命令来执行数据同步")]),e("p",[t._v("同步过程中,从节点为主节点建立客户端,以便后续命令传播")]),e("h5",{attrs:{id:"命令传播"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令传播","aria-hidden":"true"}},[t._v("#")]),t._v(" 命令传播")]),e("p",[t._v("传播命令 + 心跳检测")]),e("p",[t._v("一致性:\n异步传播,存在延迟,延迟主要因素:网络状况,传播频率,repl-disable-tcp-nodelay配置等\nrepl-disable-tcp-nodelay=yes 则按一定频率(约40ms,和操作系统有关)发包,延迟会高,带宽会低.")]),e("h3",{attrs:{id:"全量复制与部分复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全量复制与部分复制","aria-hidden":"true"}},[t._v("#")]),t._v(" 全量复制与部分复制")]),e("p",[t._v("全量复制:在初次同步或无法部分复制的情况下进行,操作较重.\n部分复制:同步中断期间的增量,如果中断时间过长,则主节点无法保存期间的写命令,则只能进行全量同步.")]),e("h4",{attrs:{id:"全量复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全量复制","aria-hidden":"true"}},[t._v("#")]),t._v(" 全量复制")]),e("p",[t._v("psync: 主异步生成RDB -> 主增量写缓冲 -> 从加载rdb -> 从执行增量命令 -> 从重写AOF")]),e("p",[t._v("1.主节点收到全量复制的命令后，执行bgsave，生成RDB，并使用一个缓冲区（称为复制缓冲区）开始执行的所有写命令")]),e("p",[t._v("2.bgsave完成后，将RDB文件发送给从节点；从节点载入接收的RDB文件，数据更新至主节点执行bgsave时的数据库状态")]),e("p",[t._v("3.主节点将复制缓冲区中的所有写命令发送给从节点，从节点执行这些写命令，将数据库状态更新至主节点的最新状态")]),e("p",[t._v("4.如果从节点开启了AOF，则会触发bgrewriteaof的执行，从而保证AOF文件更新至主节点的最新状态")]),e("h4",{attrs:{id:"部分复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部分复制","aria-hidden":"true"}},[t._v("#")]),t._v(" 部分复制")]),e("p",[t._v("三个概念:\n1.复制偏移量:offset:master,salve各自维护一个,分别代表同步的字节数\n2.复制积压缓冲区:队列,1MB.传播阶段会先传播写命令,同时双写缓冲区.当从节点落后的数据超过缓冲区备份范围时,则只能全量同步.\n3.服务器运行id(runid):redis启动时会生成40个随机16进制字符,从节点会保存,若runid不一致,则全量同步,一致则判断能否部分同步.")]),e("h4",{attrs:{id:"心跳机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#心跳机制","aria-hidden":"true"}},[t._v("#")]),t._v(" 心跳机制")]),e("p",[t._v("主要用于超时判断,数据安全等.")]),e("ol",[e("li",[t._v("主->从 ping\nPING发送的频率由repl-ping-slave-period参数控制，单位是秒，默认值是10s。")]),e("li",[t._v("从->主：REPLCONF ACK\n频率是每秒1次；命令格式为：REPLCONF ACK {offset}\n作用:\n1.监测从节点延迟情况\n2.通过offset监测命令丢失,如果丢包,则会从缓冲区重新发送\n3.辅助保证从节点的数量和延迟\nmin-slaves-to-write和min-slaves-max-lag参数来保证主节点在不安全的情况下不会执行写命令\n例如min-slaves-to-write=3 min-slaves-max-lag=10\n含义是如果从节点数量小于3个，或所有从节点的延迟值都大于10s，则主节点拒绝执行写命令。")])]),e("h4",{attrs:{id:"一致性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一致性","aria-hidden":"true"}},[t._v("#")]),t._v(" 一致性")]),e("p",[t._v("优化:\n1.优化网络环境\n2.监控延迟,过大则读master\n3.使用集群同时扩展写负载和读负载")]),e("p",[t._v("slave-serve-stale-data = yes 则数据同步阶段也可以响应请求,不安全")]),e("h4",{attrs:{id:"过期策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过期策略","aria-hidden":"true"}},[t._v("#")]),t._v(" 过期策略")]),e("p",[t._v("单机版:\n惰性删除:查询时判断是否删除\n定期删除:定时检测删除,考虑到负载,执行时间和频率有限制.")]),e("p",[t._v("主从场景:\n3.2之前从节点不进行删除,不能保证数据过期会删除.\n3.2中增加了对过期的判断,过期则不返回.")]),e("h3",{attrs:{id:"故障切换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#故障切换","aria-hidden":"true"}},[t._v("#")]),t._v(" 故障切换")]),e("p",[t._v("无哨兵场景下,需要切换redis链接.")]),e("h4",{attrs:{id:"复制超时"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复制超时","aria-hidden":"true"}},[t._v("#")]),t._v(" 复制超时")]),e("p",[t._v("超时的意义:\n1.主节点判断超时,则释放资源,避免资源浪费.\n2.从节点判断超时,则重新建立链接.")]),e("p",[t._v("判断机制\nrepl-timeout参数，默认60s，对于主节点和从节点同时有效")]),e("p",[t._v("1.主节点：每秒1次调用复制定时函数replicationCron()，\n判断当前时间距离上次收到各个从节点REPLCONF ACK的时间，是否超过了repl-timeout值，如果超过了则释放相应从节点的连接。")]),e("p",[t._v("2.从节点：从节点对超时的判断同样是在复制定时函数中判断，基本逻辑是：")]),e("p",[t._v("如果当前处于连接建立阶段，且距离上次收到主节点的信息的时间已超过repl-timeout，则释放与主节点的连接；\n如果当前处于数据同步阶段，且收到主节点的RDB文件的时间超时，则停止数据同步，释放连接；\n如果当前处于命令传播阶段，且距离上次收到主节点的PING命令或数据的时间已超过repl-timeout值，则释放与主节点的连接。")]),e("p",[t._v("case:\n1.master数据较多,生成rdb超时,则会无限重试,无限生成rdb\n解决方案:\n1.监控内存容量\n2.监控bgsave时间\n3.调整超时时间")]),e("h4",{attrs:{id:"复制中断问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复制中断问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 复制中断问题")]),e("p",[t._v("除了超时,复制缓冲区溢出也会导致中断")]),e("p",[t._v("1.数据同步过程中,增量命令写缓冲区溢出,则会失败. 容易造成死循环\n解决方案:client-output-buffer-limit slave 256MB 64MB 60\n如果buffer大于256MB，或者连续60s大于64MB，则主节点会断开与该从节点的连接.\nTip:复制缓冲区 与 复制积压缓冲区是两个概念,复制缓冲区用于数据同步,一个salve一个buffer,积压缓冲区用户传播,只有一个")]),e("h4",{attrs:{id:"主从同步tips"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主从同步tips","aria-hidden":"true"}},[t._v("#")]),t._v(" 主从同步Tips")]),e("p",[t._v("1.多个从错峰同步\n2.可以使用树形拓扑,但延迟会增加\n3.主节点重启runid会变,导致全量同步,尽量使用debug reload\n4.网络中断较频繁时,增大积压缓冲区,避免全量同步")]),e("h3",{attrs:{id:"哨兵机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哨兵机制","aria-hidden":"true"}},[t._v("#")]),t._v(" 哨兵机制")]),e("p",[t._v("master/salve无法解决自动恢复问题,哨兵主要功能是主节点故障自动迁移\n主要功能:\n监控（Monitoring）：哨兵会不断地检查主节点和从节点是否运作正常。\n自动故障转移（Automatic failover）：master故障，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他从节点改为复制新的主节点。\n配置提供者（Configuration provider）：客户端在初始化时，通过连接哨兵来获得当前Redis服务的主节点地址。\n通知（Notification）：哨兵可以将故障转移的结果发送给客户端。")]),e("h4",{attrs:{id:"监控与failover"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#监控与failover","aria-hidden":"true"}},[t._v("#")]),t._v(" 监控与failover")]),e("p",[t._v("架构:\n哨兵节点：哨兵系统由一个或多个哨兵节点组成，哨兵节点是特殊的redis节点，不存储数据。\n数据节点：主节点和从节点都是数据节点。")]),e("p",[t._v("配置:\nsentinel monitor mymaster 192.168.92.128 6379 2\n该哨兵节点监控192.168.92.128:6379这个主节点，该主节点的名称是mymaster\n最后的2的含义与主节点的故障判定有关：至少需要2个哨兵节点同意，才能判定主节点故障并进行故障转移。")]),e("p",[t._v("启动:\nredis-sentinel sentinel-26379.conf\nredis-server sentinel-26379.conf --sentinel")]),e("p",[t._v("总结(监控与自动恢复):\n1.哨兵系统中的主从节点，与普通的主从节点并没有什么区别，故障发现和转移是由哨兵来控制和完成的。")]),e("p",[t._v("2.哨兵节点本质上是redis节点。")]),e("p",[t._v("3.每个哨兵节点，只需要配置监控主节点，便可以自动发现其他的哨兵节点和从节点。")]),e("p",[t._v("4.在哨兵节点启动和故障转移阶段，各个节点的配置文件会被重写(config rewrite)。")]),e("p",[t._v("5.本章的例子中，一个哨兵只监控了一个主节点；实际上，一个哨兵可以监控多个主节点，通过配置多条sentinel monitor即可实现。")]),e("h4",{attrs:{id:"配置与通知"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置与通知","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置与通知")]),e("p",[t._v("1.配置提供者：客户端可以通过哨兵节点+masterName获取主节点信息，在这里哨兵起到的作用就是配置提供者。")]),e("p",[t._v("需要注意的是，哨兵只是配置提供者，而不是代理。二者的区别在于：如果是配置提供者，客户端在通过哨兵获得主节点信息后，会直接建立到主节点的连接，后续的请求(如set/get)会直接发向主节点；如果是代理，客户端的每一次请求都会发向哨兵，哨兵再通过主节点处理请求。")]),e("p",[t._v("2.通知：哨兵节点在故障转移完成后，会将新的主节点信息发送给客户端，以便客户端及时切换主节点。\n原理:利用redis提供的发布订阅功能，为每一个哨兵节点开启一个单独的线程，订阅哨兵节点的+switch-master频道，当收到消息时，重新初始化连接池")]),e("h3",{attrs:{id:"哨兵实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哨兵实现原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 哨兵实现原理")]),e("p",[t._v("哨兵通信,通过命令实现\n1.基础信息查询\ninfo sentinel：获取监控的所有主节点的基本信息\nsentinel masters：获取监控的所有主节点的详细信息\nsentinel master mymaster：获取监控的主节点mymaster的详细信息\nsentinel slaves mymaster：获取监控的主节点mymaster的从节点的详细信息\nsentinel sentinels mymaster：获取监控的主节点mymaster的哨兵节点的详细信息\nsentinel get-master-addr-by-name mymaster：获取监控的主节点mymaster的地址信息，前文已有介绍\nsentinel is-master-down-by-addr：哨兵节点之间可以通过该命令询问主节点是否下线，从而对是否客观下线做出判断")]),e("p",[t._v("2.增加,移除监控的主节点\nsentinel monitor mymaster2 192.168.92.128 16379\nsentinel remove mymaster2：取消当前哨兵节点对主节点mymaster2的监控")]),e("p",[t._v("3.强制故障转移\nsentinel failover mymaster：该命令可以强制对mymaster执行故障转移，即便当前的主节点运行完好；\n例如，如果当前主节点所在机器即将报废，便可以提前通过failover命令进行故障转移.")]),e("h4",{attrs:{id:"基本原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本原理")]),e("p",[t._v("1.3个定时任务:\n1)通过主节点info命令获取最新主从结构\n2)通过发布订阅,获取其他哨兵信息\n3)向其他节点发送ping,判断是否下线")]),e("p",[t._v("2.主观下线\n如果节点超过一定时间没有回复,则哨兵主观的判断其下线")]),e("p",[t._v("3.客观下线\n主观下线后,通过sentinel is-master-down-by-addr命令询问其他哨兵节点,当主观下线节点超过一定数量后,将会进行客观下线.\n客观下线只会对master, salve主观下线后,不会有后续的客观下线和故障转移")]),e("p",[t._v("4.选举领导者哨兵节点\n客观下线后,会进行领导者哨兵选举,通过领导者哨兵,对master进行故障转移\nRaft算法,先到先得,一般先客观下线的哨兵会先成为领导者")]),e("p",[t._v("5.故障转移\n1).选择原则:order by 优先级最高 ,offset大小最领先 , runid最小")]),e("h3",{attrs:{id:"哨兵配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哨兵配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 哨兵配置")]),e("p",[t._v("sentinel monitor {masterName} {masterIp} {masterPort} {quorum} 核心配置 设置哨兵监听的主节点以及masterName\nsentinel down-after-milliseconds 未收到消息多少秒后进行主观下线\nsentinel parallel-syncs 主从切换后,主从复制的并发数量")]),e("h3",{attrs:{id:"实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实践","aria-hidden":"true"}},[t._v("#")]),t._v(" 实践")]),e("p",[t._v("1.多个哨兵,避免哨兵成为高可用瓶颈,避免误判\n2.哨兵数量奇数,用于选举")]),e("h3",{attrs:{id:"哨兵的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哨兵的问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 哨兵的问题")]),e("p",[t._v("1.并不能解决从节点的故障,可能会导致读服务不可用\n2.没有办法解决写负载过高的问题,只能通过集群,分片来做")]),e("h2",{attrs:{id:"redis集群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis集群","aria-hidden":"true"}},[t._v("#")]),t._v(" Redis集群")]),e("p",[t._v("集群中的节点分为主,从:主负责读和集群维护,从负责读和复制")]),e("p",[t._v("集群的作用:\n1.数据分区分片\n2.高可用(支持主从复制,故障自动转移)")]),e("h3",{attrs:{id:"集群搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集群搭建","aria-hidden":"true"}},[t._v("#")]),t._v(" 集群搭建")]),e("p",[t._v("1.使用命令\n2.使用脚本")]),e("p",[t._v("集群的搭建可以分为四步：\n1.启动节点：将节点以集群模式启动，此时节点是独立的，并没有建立联系；\n配置中添加:\ncluster-enabled yes 开启集群模式\ncluster-config-file 该参数指定了集群配置文件的位置.\n每个节点在运行过程中，会维护一份集群配置文件；\n每当集群信息发生变化时（如增减节点），集群内所有节点会将最新信息更新到该配置文件；\n当节点重启后，会重新读取该配置文件，获取集群信息，可以方便的重新加入到集群中。")]),e("p",[t._v("集群启动阶段没有主从关系,不需要配置salveof")]),e("p",[t._v("2.节点握手：让独立的节点连成一个网络；\ncluster meet {ip} {port} 命令实现")]),e("p",[t._v("3.分配槽：将16384个槽分配给主节点；\n集群分配16384个槽,槽负责数据管理,分片,迁移;\n所有槽都需要分配节点,如果存在未分配,则集群处于下线状态(fail)\ncluster addslots 命令分配槽")]),e("p",[t._v("4.指定主从关系：为从节点指定主节点。\ncluster nodes指定从节点")]),e("p",[t._v("也可以通过redis-trib.rb Ruby脚本实现")]),e("h3",{attrs:{id:"集群架构设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集群架构设计","aria-hidden":"true"}},[t._v("#")]),t._v(" 集群架构设计")]),e("p",[t._v("1.高可用要求: 至少3个主节点才能完成故障转移,主节点不应在同一物理机;每个主节点至少一个从节点,不应在同一物理机.\n2.数据量和访问量:根据业务未来发展,合理评估容量和访问量,计算需要的主节点个数.\n3.节点数量限制:不要超过1000,通信开销很大;过大需要拆分成小集群;\n4.适度冗余")]),e("h3",{attrs:{id:"实现原理-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现原理-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 实现原理")]),e("h4",{attrs:{id:"数据分区方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据分区方案","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据分区方案")]),e("p",[t._v("1.顺序分区\n2.hash分区,具有天然的随机性,使用广泛\nHash取舍分区,一致性Hash分区,虚拟节点一致性Hash分区")]),e("p",[t._v("衡量好坏的标准:\n1.是否分布均匀\n2.节点增删是否会对分布有影响")]),e("p",[t._v("Hash相对均匀,所以主要看中增减节点对数据的影响")]),e("h5",{attrs:{id:"hash-mod分区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hash-mod分区","aria-hidden":"true"}},[t._v("#")]),t._v(" hash Mod分区")]),e("p",[t._v("足够均匀,问题是新增删除时会有大规模的rehash.")]),e("h5",{attrs:{id:"一致性hash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一致性hash","aria-hidden":"true"}},[t._v("#")]),t._v(" 一致性hash")]),e("p",[t._v("hash空间组成虚拟的环,hash后找下一个最近的节点存储,变更时会影响一个节点.\n问题:节点较少时,对下一节点影响会比较大.")]),e("h5",{attrs:{id:"虚拟分区一致性hash-redis集群方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟分区一致性hash-redis集群方案","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚拟分区一致性hash(Redis集群方案)")]),e("p",[t._v("集群分为多个槽slot,一个node承载多个slot,当节点删除时,变动的槽均匀分布到多个node上.")]),e("h5",{attrs:{id:"hash过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hash过程","aria-hidden":"true"}},[t._v("#")]),t._v(" hash过程")]),e("p",[t._v("1.Redis对数据的特征值（一般是key）计算哈希值，使用的算法是CRC16。")]),e("p",[t._v("2.根据哈希值，计算数据属于哪个槽。")]),e("p",[t._v("3.根据槽与节点的映射关系，计算数据属于哪个节点。")]),e("h4",{attrs:{id:"节点通信机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#节点通信机制","aria-hidden":"true"}},[t._v("#")]),t._v(" 节点通信机制")]),e("h5",{attrs:{id:"两个端口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两个端口","aria-hidden":"true"}},[t._v("#")]),t._v(" 两个端口:")]),e("p",[t._v("1.客户端端口,服务于客户端\n2.集群端口(客户端端口号 + 10000),服务于集群通信")]),e("h5",{attrs:{id:"gossip协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gossip协议","aria-hidden":"true"}},[t._v("#")]),t._v(" Gossip协议")]),e("p",[t._v("节点间通信主要是:P2P,广播,Gossip")]),e("p",[t._v("广播收敛速度快,但是Cpu,带宽消耗大.\nGossip通过随机点对点通信,收敛速度慢,cpu带宽开销小,去中心化.")]),e("h5",{attrs:{id:"消息类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消息类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 消息类型:")]),e("p",[t._v("节点采用固定频率的定时任务进行通信工作(1秒10次)\n1.MEET消息 握手阶段,新节点加入集群消息")]),e("p",[t._v("2.PING消息:包括自身节点和部分其他节点信息,用作信息交换,使用Gossip协议\n规则:\n1)随机找5个节点，在其中选择最久没有通信的1个节点\n2)扫描节点列表，选择最近一次收到PONG消息时间大于cluster_node_timeout/2的所有节点，防止这些节点长时间未更新")]),e("p",[t._v("3.PONG消息:PONG消息封装了自身状态数据,可以分为两种\n第一种是在接到MEET/PING消息后回复的PONG消息；\n第二种是指节点向集群广播PONG消息，这样其他节点可以获知该节点的最新信息，例如故障恢复后新的主节点会广播PONG消息。")]),e("p",[t._v("4.FAIL消息\n当一个主节点判断另一个主节点进入FAIL状态时，会向集群广播这一FAIL消息；接收节点会将这一FAIL消息保存起来，便于后续的判断。")]),e("p",[t._v("5.PUBLISH消息：节点收到PUBLISH命令后，会先执行该命令，然后向集群广播这一消息，接收节点也会执行该PUBLISH命令。")]),e("h5",{attrs:{id:"数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据结构")]),e("p",[t._v("点需要专门的数据结构来存储集群的状态。所谓集群的状态，是一个比较大的概念，包括：\n1.集群是否处于上线状态\n2.集群中有哪些节点\n3.节点是否可达\n4.节点的主从状态\n5.槽的分布\n6....等")]),e("p",[t._v("最关键的是clusterNode和clusterState结构：前者记录了一个节点的状态，后者记录了集群作为一个整体的状态。")]),e("p",[t._v("clusterNode\ntypedef struct clusterNode {\n//节点创建时间\nmstime_t ctime;")]),e("pre",[e("code",[t._v("//节点id\nchar name[REDIS_CLUSTER_NAMELEN];\n\n//节点的ip和端口号\nchar ip[REDIS_IP_STR_LEN];\nint port;\n\n//节点标识：整型，每个bit都代表了不同状态，如节点的主从状态、是否在线、是否在握手等\nint flags;\n\n//配置纪元：故障转移时起作用，类似于哨兵的配置纪元\nuint64_t configEpoch;\n\n//槽在该节点中的分布：占用16384/8个字节，16384个比特；每个比特对应一个槽：比特值为1，则该比特对应的槽在节点中；比特值为0，则该比特对应的槽不在节点中\nunsigned char slots[16384/8];\n\n//节点中槽的数量\nint numslots;\n\n…………\n")])]),e("p",[t._v("} clusterNode;")]),e("p",[t._v("clusterState")]),e("p",[t._v("typedef struct clusterState {")]),e("pre",[e("code",[t._v("//自身节点\nclusterNode *myself;\n\n//配置纪元\nuint64_t currentEpoch;\n\n//集群状态：在线还是下线\nint state;\n\n//集群中至少包含一个槽的节点数量\nint size;\n\n//哈希表，节点名称->clusterNode节点指针\ndict *nodes;\n\n//槽分布信息：数组的每个元素都是一个指向clusterNode结构的指针；如果槽还没有分配给任何节点，则为NULL\nclusterNode *slots[16384];\n\n…………\n")])]),e("p",[t._v("} clusterState;")]),e("h5",{attrs:{id:"集群命令实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集群命令实现原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 集群命令实现原理")]),e("p",[t._v("cluster meet\n假设要向A节点发送cluster meet命令，将B节点加入到A所在的集群，则A节点收到命令后，执行的操作如下：")]),e("p",[t._v("1.A为B创建一个clusterNode结构，并将其添加到clusterState的nodes字典中")]),e("p",[t._v("2.A向B发送MEET消息")]),e("p",[t._v("3.B收到MEET消息后，会为A创建一个clusterNode结构，并将其添加到clusterState的nodes字典中")]),e("p",[t._v("4.B回复A一个PONG消息")]),e("p",[t._v("5.A收到B的PONG消息后，便知道B已经成功接收自己的MEET消息")]),e("p",[t._v("6.然后，A向B返回一个PING消息")]),e("p",[t._v("7.B收到A的PING消息后，便知道A已经成功接收自己的PONG消息，握手完成")]),e("p",[t._v("8.之后，A通过Gossip协议将B的信息广播给集群内其他节点，其他节点也会与B握手；一段时间后，集群收敛，B成为集群内的一个普通节点")]),e("p",[t._v("通过上述过程可以发现，集群中两个节点的握手过程与TCP类似，都是三次握手：A向B发送MEET；B向A发送PONG；A向B发送PING。")]),e("p",[t._v("cluster addslots")]),e("p",[t._v("cluster addslots命令接收一个槽或多个槽作为参数，例如在A节点上执行cluster addslots {0..10}命令，是将编号为0-10的槽分配给A节点，具体执行过程如下：")]),e("p",[t._v("1.遍历输入槽，检查它们是否都没有分配，如果有一个槽已分配，命令执行失败；方法是检查输入槽在clusterState.slots[]中对应的值是否为NULL。")]),e("p",[t._v("2.遍历输入槽，将其分配给节点A；方法是修改clusterNode.slots[]中对应的比特为1，以及clusterState.slots[]中对应的指针指向A节点")]),e("p",[t._v("3.A节点执行完成后，通过节点通信机制通知其他节点，所有节点都会知道0-10的槽分配给了A节点")]),e("h3",{attrs:{id:"集群客户端使用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集群客户端使用方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 集群客户端使用方法")]),e("h4",{attrs:{id:"redis-cli"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis-cli","aria-hidden":"true"}},[t._v("#")]),t._v(" redis-cli")]),e("p",[t._v("如果key对应的slot在本节点,则直接操作,否则返回MOVED")]),e("h4",{attrs:{id:"jediscluster"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jediscluster","aria-hidden":"true"}},[t._v("#")]),t._v(" JedisCluster")]),e("p",[t._v("1.初始化时通过cluster slots命令缓存slot->node的关系\n2.失败时重新加载slot->node的关系")]),e("h3",{attrs:{id:"最佳实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践","aria-hidden":"true"}},[t._v("#")]),t._v(" 最佳实践")]),e("h4",{attrs:{id:"集群伸缩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集群伸缩","aria-hidden":"true"}},[t._v("#")]),t._v(" 集群伸缩")]),e("p",[t._v("新增节点:启动节点 -> 握手 -> 槽迁移(均分) -> 指定主从关系\n减少节点:槽迁移 -> 下线节点")]),e("p",[t._v("ASK错误,当正在进行槽迁移时,会返回ask错误")]),e("h4",{attrs:{id:"故障转移"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#故障转移","aria-hidden":"true"}},[t._v("#")]),t._v(" 故障转移")]),e("p",[t._v("与哨兵机制类似:主观下线 -> 客观下线 —> 从节点故障转移\n投票数量:N/2+1,由于故障master无法投票,因此集群master数量要>=3")]),e("h4",{attrs:{id:"failover时间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#failover时间","aria-hidden":"true"}},[t._v("#")]),t._v(" failover时间")]),e("p",[t._v("所需要的时间主要消耗在主观下线识别、主观下线传播、选举延迟等几个环节.\n故障转移时间(毫秒) ≤ 1.5 * cluster-node-timeout + 1000")]),e("h4",{attrs:{id:"hashtag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashtag","aria-hidden":"true"}},[t._v("#")]),t._v(" HashTag")]),e("p",[t._v("背景:批量操作,事物需要在一个节点上执行,但是现有hash策略有可能会导致在多个节点\n方案:使用HashTag在批量操作时,作为hash计算slot的key")]),e("h4",{attrs:{id:"参数优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参数优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 参数优化")]),e("p",[t._v("cluster_node_timeout 默认值15s，影响包括：")]),e("p",[t._v("1.影响PING消息接收节点的选择：值越大对延迟容忍度越高，选择的接收节点越少，可以降低带宽，但会降低收敛速度；应根据带宽情况和应用要求进行调整。")]),e("p",[t._v("2.影响故障转移的判定和时间：值越大，越不容易误判，但完成转移消耗时间越长；应根据网络状况和应用要求进行调整。")]),e("p",[t._v("cluster-require-full-coverage\n只有当16384个槽全部分配完毕时，集群才能上线。这样做是为了保证集群的完整性，但同时也带来了新的问题：当主节点发生故障而故障转移尚未完成，原主节点中的槽不在任何节点中，此时会集群处于下线状态，无法响应客户端的请求。")]),e("p",[t._v("cluster-require-full-coverage参数可以改变这一设定：如果设置为no，则当槽没有完全分配时，集群仍可以上线。参数默认值为yes，如果应用对可用性要求较高，可以修改为no，但需要自己保证槽全部分配。")])])}],!1,null,null,null);a.default=s.exports}}]);